from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardBuilder()
main_keyboard.row(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è ü™Ñ"))
main_keyboard.row(KeyboardButton(text="–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è üëÄ"))
main_keyboard = main_keyboard.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def create_notify_keyboard(state: str) -> InlineKeyboardBuilder:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç—Ä—ë—Ö–±–∏—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä '101').
    """
    labels = ["–ó–∞ 7 –¥–Ω–µ–π", "–ó–∞ –¥–µ–Ω—å", "–í –¥–µ–Ω—å"]
    callback_prefix = ["before-week", "before-day", "today"]
    
    keyboard = InlineKeyboardBuilder()
    
    for i, (label, prefix) in enumerate(zip(labels, callback_prefix)):
        status = "[‚úÖ]" if state[i] == "1" else "[‚ùå]"
        callback_data = f"notify_set_{1 - int(state[i])}_{prefix}"
        keyboard.row(InlineKeyboardButton(text=f"{status} {label}", callback_data=callback_data))
    
    keyboard.row(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å üôå", callback_data="approve_adding"))
    keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ üôÖ‚Äç‚ôÇÔ∏è", callback_data="cancel_states"))

    return keyboard.as_markup()

notify_keyboards = {
    tuple(map(bool, map(int, f"{i:03b}"))): create_notify_keyboard(f"{i:03b}")
    for i in range(8)
}

def choose_correct_notify_keyboard(data):
    return notify_keyboards.get(
        (data['notify_before_week'], data['notify_before_day'], data['notify_in_today']),
        cancel_keyboard
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã states
cancel_keyboard = InlineKeyboardBuilder()
cancel_keyboard.row(InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_states"))
cancel_keyboard = cancel_keyboard.as_markup()

months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - –≤–ø—Ä–∞–≤–æ-–≤–ª–µ–≤–æ
def get_month_keyboard(current_month: int) -> InlineKeyboardMarkup:
    prev_month = current_month - 1 if current_month > 1 else 12
    next_month = current_month + 1 if current_month < 12 else 1
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=f"‚¨ÖÔ∏è {months[(current_month - 2) % 12]}", callback_data=f"list_select_month_{prev_month}"),
        InlineKeyboardButton(text=f"        ", callback_data=f"list_select_month_none"),
        InlineKeyboardButton(text=f"‚û°Ô∏è {months[current_month % 12]}", callback_data=f"list_select_month_{next_month}")
    )
    
    builder.row(InlineKeyboardButton(text=f"–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", callback_data=f"list_select_month_list"))
    builder.row(InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data=f"list_select_month_{current_month}_update"))
    builder.row(InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="list_select_month_all"))
    
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Å–ø–∏—Å–∫–æ–º
list_months = InlineKeyboardBuilder()
list_months_buttons = [[InlineKeyboardButton(text=f"{months[j]}", callback_data=f"list_select_month_{j+1}") for j in range(i*3, i*3 + 3)] for i in range(4)]
for i in range(4):
    list_months.row(*list_months_buttons[i])
list_months = list_months.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏
def get_entries_list(data: list, month: int, show_choose_buttons: bool = False, koef: int = 0) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    list_intersected = [x for x in list(range(koef * 20, koef * 20 + 20)) if x in list(range(len(data)))]
    for i in list_intersected:
        builder.row(InlineKeyboardButton(text=f"{data[i]["name"]}", callback_data=f"del_month={month}_{data[i]["id"]}"))
    if show_choose_buttons:
        buttons_local = []
        if koef > 0:
            buttons_local.append(InlineKeyboardButton(text=f"‚¨ÖÔ∏è", callback_data=f"del_month={month}_{koef - 1}_left"))
            if not koef * 20 + 20 > len(data):
                buttons_local.append(InlineKeyboardButton(text=f"   ", callback_data=f"del_none"))
                buttons_local.append(InlineKeyboardButton(text=f"‚û°Ô∏è", callback_data=f"del_month={month}_{koef + 1}_right"))
        else:
            buttons_local.append(InlineKeyboardButton(text=f"‚û°Ô∏è", callback_data=f"del_month={month}_{koef + 1}_right"))
        builder.row(*buttons_local)
    builder.row(InlineKeyboardButton(text=f"–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"del_month={month}_tolist"))
    return builder.as_markup()
